{"version":3,"sources":["assets/linkedin-logo.svg","assets/loader.svg","App.js","index.js"],"names":["LINKEDIN_LINK","App","useState","currentAccount","setCurrentAccount","isLoading","setLoading","tokenId","setTokenId","connectWallet","a","window","ethereum","alert","request","method","accounts","console","log","setupEventListener","provider","ethers","providers","Web3Provider","signer","getSigner","Contract","contractAddress","myEpicWeb3Nft","abi","on","from","toNumber","error","askContractToMintNft","connectedContract","makeAWeb3NFT","nftTxn","wait","hash","useEffect","checkIfWalletIsConnected","length","account","chainId","className","onClick","Fragment","Alert","onClose","severity","AlertTitle","href","target","rel","alt","src","linkedinlogo","loaderIcon","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b3d2240.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/linkedin-logo.eb11e5e7.svg\";","export default __webpack_public_path__ + \"static/media/loader.6eecb0d1.svg\";","import { ethers } from 'ethers'\nimport React, { useEffect, useState } from 'react'\nimport Alert from '@mui/material/Alert'\nimport AlertTitle from '@mui/material/AlertTitle'\nimport './styles/App.css'\n\nimport linkedinlogo from './assets/linkedin-logo.svg'\nimport loaderIcon from './assets/loader.svg'\nimport myEpicWeb3Nft from './artifacts/contracts/MyWeb3NFT.sol/MyWeb3NFT.json'\nimport { contractAddress } from './artifacts/contractAddress.json'\n\nconst LINKEDIN_HANDLE = 'ram-gaikar'\nconst LINKEDIN_LINK = `https://www.linkedin.com/in/${LINKEDIN_HANDLE}`\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState('')\n  const [isLoading, setLoading] = useState(false)\n  const [tokenId, setTokenId] = useState(null)\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window\n\n      if (!ethereum) {\n        alert('Get MetaMask!')\n        return\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\n\n      console.log('Connected', accounts[0])\n      setCurrentAccount(accounts[0])\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const connectedContract = new ethers.Contract(\n          contractAddress,\n          myEpicWeb3Nft.abi,\n          signer,\n        )\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on('NewWeb3NFTMinted', (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          setTokenId(tokenId.toNumber())\n        })\n\n        console.log('Setup event listener!')\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n    setTokenId(null)\n    try {\n      const { ethereum } = window\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const connectedContract = new ethers.Contract(\n          contractAddress,\n          myEpicWeb3Nft.abi,\n          signer,\n        )\n\n        console.log('Going to pop wallet now to pay gas...')\n        let nftTxn = await connectedContract.makeAWeb3NFT()\n\n        setLoading(true)\n        console.log('Mining...please wait.')\n        await nftTxn.wait()\n        setLoading(false)\n        // console.log(nftTxn)\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`,\n        )\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    const checkIfWalletIsConnected = async () => {\n      const { ethereum } = window\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!')\n        return\n      } else {\n        console.log('We have the ethereum object', ethereum)\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' })\n\n      if (accounts.length !== 0) {\n        const account = accounts[0]\n        console.log('Found an authorized account:', account)\n        setCurrentAccount(account)\n\n        // Setup listener! This is for the case where a user comes to our site\n        // and ALREADY had their wallet connected + authorized.\n        setupEventListener()\n      } else {\n        console.log('No authorized account found')\n      }\n\n      let chainId = await ethereum.request({ method: 'eth_chainId' })\n      console.log('Connected to chain ' + chainId)\n\n      // String, hex code of the chainId of the Rinkebey test network\n      const rinkebyChainId = '0x4'\n      if (chainId !== rinkebyChainId) {\n        alert('You are not connected to the Rinkeby Test Network!')\n      }\n    }\n    checkIfWalletIsConnected()\n  }, [])\n\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  )\n\n  const renderMintUI = () => (\n    <React.Fragment>\n      <button\n        onClick={askContractToMintNft}\n        className=\"cta-button connect-wallet-button\"\n      >\n        Mint NFT\n      </button>\n      {tokenId && (\n        <Alert onClose={() => {}} severity=\"success\" className=\"alert-box\">\n          <AlertTitle>\n            Hey there! We've minted your NFT and sent it to your wallet.\n          </AlertTitle>\n          It may be blank right now. It can take a max of 10 min to show up on\n          OpenSea. Here's the link:{' '}\n          <a\n            href={`https://testnets.opensea.io/assets/${contractAddress}/${tokenId}`}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            OpenSea\n          </a>\n        </Alert>\n      )}\n    </React.Fragment>\n  )\n\n  return (\n    <div className=\"App\">\n      <div className={isLoading ? 'container loading' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">\n            EPIC Mahabharat Characters NFT Collection\n          </p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your Mahabharat Character\n            today.\n          </p>\n          {currentAccount === ''\n            ? renderNotConnectedContainer()\n            : renderMintUI()}\n        </div>\n        <div className=\"footer-container\">\n          <a\n            className=\"footer-text\"\n            href={LINKEDIN_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            Built by{' '}\n            <img\n              alt=\"Linkedin Logo\"\n              className=\"linkedin-logo\"\n              src={linkedinlogo}\n            />\n          </a>\n        </div>\n      </div>\n      {isLoading && (\n        <div className=\"loader\">\n          <img src={loaderIcon} alt=\"Loader\"></img>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}